<?php

namespace App\Admin\Controllers;

use App\User;
use App\Http\Controllers\Controller;
use Encore\Admin\Controllers\HasResourceActions;
use Encore\Admin\Form;
use Encore\Admin\Grid;
use Encore\Admin\Layout\Content;
use Encore\Admin\Show;


use App\Admin\Extensions\CheckRow;
use App\Admin\Extensions\Tools\UserGender;
use Encore\Admin\Widgets\Box;
//本文件由以下命令创建
//php artisan admin:make UserController --model=App\\User
//php artisan admin:make UserTeamController --model=Modules\\User\\Entities\\UserTeam
//注意是两个斜杠,如果在models里,则为App\\Models\\User
//对应路由配置    $router->resource('users', UserController::class);      app/Admin/routes.php里添加一行：
//随后访问 ?/admin/users 即可
//如果是自定义函数 则 使用该方法  $router->get('abc', 'HomeController@index'); 注意,abc位置不能含有斜杠
class UserController extends Controller
{
    use HasResourceActions;

    public function index2(Content $content)
    {
        //Box 不知道是什么
        //parent::__call($method, $parameters); // TODO: Change the autogenerated stub
        return $content
            ->header('Chartjs')
            ->body(new Box('Bar chart', view('admin.chartjs')));
    }

    /**
     * Index interface.
     *
     * @param Content $content
     * @return Content
     */
    public function index(Content $content)
    {
        return $content
            ->header('Index')
            ->description('description')
            ->body($this->grid());
    }

    /**
     * Show interface.
     *
     * @param mixed $id
     * @param Content $content
     * @return Content
     */
    public function show($id, Content $content)
    {
        return $content
            ->header('Detail')
            ->description('description')
            ->body($this->detail($id));
    }

    /**
     * Edit interface.
     *
     * @param mixed $id
     * @param Content $content
     * @return Content
     */
    public function edit($id, Content $content)
    {
        return $content
            ->header('Edit')
            ->description('description')
            ->body($this->form()->edit($id));
    }

    /**
     * Create interface.
     *
     * @param Content $content
     * @return Content
     */
    public function create(Content $content)
    {
        return $content
            ->header('Create')
            ->description('description')
            ->body($this->form());
    }

    /**
     * Make a grid builder.
     *
     * @return Grid
     */
    protected function grid()
    {
        $grid = new Grid(new User);
        //修改来源数据
        $grid->model()->where('id', '>', 0);
        //$grid->model()->orderBy('id', 'asc');
        //$grid->model()->take(3);

        $grid->id('ID')->sortable()->editable();//->sortable();将这一列设置为可排序列 通过editable.js的帮助，可以让你在表格中直接编辑数据
        //$grid->id('ID');
        //title字段名和Grid对象的title方法冲突，所以用Grid的column()方法代替 $grid->column('title');
        //通过display($callback)方法设置这一列的显示内容为users表中对应的用户名

        $grid->name('姓名')->display(function($name) {
            // return User::find($userId)->name;
            return $name?$name:"[暂无]";
        })->style('max-width:200px;word-break:break-all;');//基于setAttributes()方法封装了style()方法，直接添加样式，比如限制列的宽度：
        $grid->email('Email')->setAttributes(['style' => 'color:red;']); //列对象的setAttributes()方法用来给当前这一列的每一行添加HTML属性
        $grid->column('email', '邮箱');// 效果和上面一样
/**             modal  弹出模态框来显示更多内容  expand  列展开功能
        $grid->email_verified_at('Email verified at')->expand(function ($model) {
            //如果一行的字段比较多，可以通过列展开功能，来隐藏过多的内容
            $comments = $model->comments()->take(10)->get()->map(function ($comment) {
                return $comment->only(['id', 'name', 'created_at']);
            });
            return new Table(['ID', '姓名', '发布时间'], $comments->toArray());
        });*/
        //$grid->columns('email', 'name' );// 添加多列
        // 不存的字段列
        $grid->column('ID+1')->display(function () {
            return $this->id+1;
        });
        //$grid->gender()->using(['f' => '女', 'm' => '男']);
        // 默认为每页20条$grid->paginate(15);

        //禁用创建按钮$grid->disableCreateButton();
        //禁用分页条$grid->disablePagination();
        //禁用查询过滤器$grid->disableFilter();
        //禁用导出数据按钮$grid->disableExport();
        //禁用行选择checkbox$grid->disableRowSelector();
        //禁用行操作列$grid->disableActions();
        //设置分页选择器选项$grid->perPages([10, 20, 30, 40, 50]);


        //model-grid默认有两个行操作编辑和删除，可以通过下面的方式关闭它们：
       //可选
         $grid->actions(function ($actions) {
             $actions->disableDelete();
             $actions->disableEdit();
             $actions->disableView();
         });
         // 可以通过传入的$actions参数来获取当前行的数据：//可选
         $grid->actions(function ($actions) {
             $actions->row;// 当前行的数据数组
             $actions->getKey();// 获取当前行主键值
         });
         //如果有自定义的操作按钮，可以通过下面的方式添加：
         $grid->actions(function ($actions) {
            $actions->append('<a href=""><i class="fa fa-eye"></i></a>');// append一个操作
            $actions->prepend('<a href=""><i class="fa fa-paper-plane"></i></a>');// prepend一个操作
             //如果有比较复杂的操作，可以参考下面的方式：先定义操作类CheckRow,然后添加操作
             $actions->append(new CheckRow($actions->getKey()));
         });


        $grid->tools(function ($tools) {
            $tools->append(new UserGender());
        });
        //        在model-grid定义中接收到gender参数后，做好数据查询就可以了：
        //if (in_array(Request::get('gender'), ['m', 'f'])) {
        //    $grid->model()->where('gender', Request::get('gender'));
        //}
        //目前默认实现了批量删除操作的功能，如果要关掉批量删除操作：
        $grid->tools(function ($tools) {
            $tools->batch(function ($batch) {
                $batch->disableDelete();
            });
        });


        $grid->filter(function($filter){
            // 去掉默认的id过滤器
            $filter->disableIdFilter();
            // 在这里添加字段过滤器
            $filter->like('email', '邮箱');
            $filter->like('name', '姓名');
            $filter->notEqual('id', "ID不为");
        });

        return $grid;
    }

    /**
     * Make a show builder.
     *
     * @param mixed $id
     * @return Show
     */
    protected function detail($id)
    {
        $show = new Show(User::findOrFail($id));

        $show->id('Id');
        $show->name('Name');
        $show->email('Email');
        $show->email_verified_at('Email verified at');
        $show->password('Password');
        $show->remember_token('Remember token');
        $show->created_at('Created at');
        $show->updated_at('Updated at');

        return $show;
    }

    /**
     * Make a form builder.
     *
     * @return Form
     */
    protected function form()
    {
        $form = new Form(new User);

        $form->text('name', 'Name');
        $form->email('email', 'Email');
        $form->datetime('email_verified_at', 'Email verified at')->default(date('Y-m-d H:i:s'));
        $form->password('password', 'Password');
        $form->text('remember_token', 'Remember token');

        return $form;
    }
}
